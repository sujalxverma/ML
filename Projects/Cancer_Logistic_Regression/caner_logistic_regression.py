# -*- coding: utf-8 -*-
"""Caner_Logistic_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XCVhqAfpD_LQoZTS1FpEsOXmirNd2JlC
"""


import warnings
warnings.filterwarnings('ignore')


import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import seaborn as sns


cancerData = pd.read_csv("data.csv")
columns = cancerData.columns
targetCol = 'diagnosis'
cancerData['diagnosis'] = cancerData['diagnosis'].map({"M": 1, "B": 0})
targetData = cancerData[targetCol]

# visualize NAs in heatmap
# sns.heatmap(cancerData.isnull(), yticklabels=False, cbar=False, cmap='viridis')   # to show how null values count in graphical way.
# plt.show() 

cancerData.drop(columns=[targetCol,'Unnamed: 32','id'],inplace=True)


from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
cancerData = scaler.fit_transform(cancerData)
cancerData = pd.DataFrame(cancerData,columns = columns[2:-1])



X_train,X_test,y_train,y_test = train_test_split(cancerData,targetData,test_size=0.3,random_state=42)

# --------------------------------------------------------------------------
#  MANUALLY CHECKS THE VARIATION OF ACCURACY W/ C (inverse of regularization strength)
# model = LogisticRegression()
# model.fit(X_train,y_train)
# 
# c_parameter = []
# accuracy_train = []
# accuracy_test = []
# 
# for i in np.arange(0.01,10,0.01):
#   model = LogisticRegression(C=i)
#   model.fit(X_train,y_train)
#   c_parameter.append(i)
#   accuracy_train.append(model.score(X_train,y_train))
#   accuracy_test.append(model.score(X_test,y_test))

# plt.plot(c_parameter,accuracy_train,label='Training Accuracy')
# plt.plot(c_parameter,accuracy_test,label='Testing Accuracy')
# plt.legend()
# plt.show()

# --------------------------------------------------------------------------



from sklearn.linear_model import LogisticRegressionCV
C_model = LogisticRegressionCV(cv=10,Cs=20,max_iter=1000).fit(X_train,y_train)
C_model.score(X_test,y_test)
best_C = C_model.C_[0]

model = LogisticRegression(C=best_C)
model.fit(X_train,y_train)
print(f"Best C found: {best_C}")
print(f"Train accuracy: {model.score(X_train, y_train):.4f}")
print(f"Test accuracy: {model.score(X_test, y_test):.4f}")

# Hence our model is about 98% accurate on test data

import joblib
joblib.dump(model, 'Cancer_Logistic_Regression_Model.pkl')  # Saves to a file
